---
title: Dynamic Simulation and plotting
format:
  html:
    code-fold: true
jupyter: python3
execute: 
  eval: false
---

The following tutorial introduces dynamic simulations (RMS/EMT), plotting and exporting of results (to pandas or csv) using *powfacpy*.

Let's again set up *PowerFactory* and create an instance of the class `PFPlotInterface`. This class inherits from `PFBaseInterface` (so those methods are available).

```{python}
# If you use IPython/Jupyter:
import sys
sys.path.append(r'C:\Program Files\DIgSILENT\PowerFactory 2023 SP3\Python\3.10') # you may use a different directory
# Get the PF app
import powerfactory
app = powerfactory.GetApplication()
sys.path.insert(0,r'D:\User\seberlein\Code\powfacpy\src') 
import powfacpy
app.Show()
app.ActivateProject(r"powfacpy\powfacpy_tests") # You may change the project path.
# Make sure the path starts with "\"
pfpi = powfacpy.PFPlotInterface(app)
pfpi.activate_study_case(r"Study Cases\test_plot_interface\Study Case 1")
```

# Plotting inside *PowerFactory*

In *PowerFactory*, monitored result variables (to be later plotted or exported) need to be specified before the simulation. The easiest way to plot results using *powfacpy* is to simply use the method `plot` before the simulation, which automaticallly adds a variable to the monitored variables and plots it as soon as the simulation has run.

First, we set the active plot (starting from a clean graphics board by clearing all plot pages).

```{python}
pfpi.clear_plot_pages() # Start from a clean graphics board
pfpi.set_active_plot("Plot 1", "Plot page 1")
```

The method `set_active_plot` takes the name of the plot and the name of the page of the plot as input arguments. If the plot (or the page) does not exist, it is created. If there should be several plots on one page, the method is called several times with the same page name but different plot name (e.g. `pfpi.set_active_plot("Plot 2", "Plot page 1")`). 

All plot commmands are applied to the active plot. We can now add curves to the plot.

```{python}
# Curve of variable "s:Iqcmd"
pfpi.plot(r"Network Model\Network Data\test_plot_interface"
    r"\Grid 1\WECC WT Control System Type 4A\REEC_A Electrical Control Model", 
    
    "s:Iqcmd")
# Curve of variable "s:Ipcmd"
# Prepare arguments
dsl_controller_obj = pfpi.get_unique_obj(r"Network Model\Network Data"
    r"\test_plot_interface\Grid 1\WECC WT Control System Type 4A\REEC_A Electrical Control Model")
results_obj = pfpi.get_unique_obj(r"Study Cases\test_plot_interface\Study Case 1\All calculations")
# Plot with keyword arguments
pfpi.plot(dsl_controller_obj,
    "s:Ipcmd", 
    linestyle = 3, 
    linewidth = 200, 
    color = 5,
    label = "Reactive power setpoint",
    results_obj = results_obj)
```

The method `plot` takes the PF object and its variable as first and second input. Furthermore, keyword arguments can be specified as shown for the second curve. 

Now we can execute a dynamic simulation using the dynamic simulation interface class.

```{python}
pfds = powfacpy.PFDynSimInterface(app)
pfds.initialize_sim({"iopt_sim":"rms"})
pfds.run_sim({"tstop":0.5})
```

The two methods initialize and run the simulation. Paramters for the ComInc object (initialization) and the ComSim (run simulation) can be specified in a dictionary. If no parameters need to be set, one can also use:

```{python}
pfds.initialize_and_run_sim()
```

In some cases, it might be more convenient to add the result variable first, then simulate and finally specifiy the plot:

```{python}
dsl_controller_obj = pfpi.get_unique_obj(r"Network Model\Network Data"
    r"\test_plot_interface\Grid 1\WECC WT Control System Type 4A\REEC_A Electrical Control Model")
pfds.add_results_variable(dsl_controller_obj, "s:Ipcmd")
pfds.initialize_and_run_sim()
pfpi.plot(dsl_controller_obj, "s:Iqcmd")
```

So the method `add_results_variable` is used to add variables to the monitored vaiables to later export or plot them.

Sometimes we have created plots in one study case and want to have those plots also in another study case. This can be achieved by copying the graphics board content (or parts of it) from one study case to another:

```{python}
study_case_1 = pfpi.get_unique_obj(r"Study Cases\test_plot_interface\Study Case 1")
study_case_2 = pfpi.get_unique_obj(r"Study Cases\test_plot_interface\Study Case 2")
pfpi.copy_graphics_board_content(study_case_1, study_case_2, "*.GrpPage")
```

This copies all plot pages (class GrpPage) of Study Case 1 to Study Case 2. The target study case argument can also be a list of cases. Or we can use the method `copy_graphics_board_content_to_all_study_cases` to target all study cases or all cases in a certain folder.

# Exporting results from *PowerFactory*

Simulation results can be exported to a [Pandas DataFrame](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html) via the `powfacpy.PFResultsInterface`.

```{python}
pfri = powfacpy.PFResultsInterface(app)
```

## To Pandas DataFrame
Simulation results can be exported to a [Pandas DataFrame](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html).

```{python}
pfds.initialize_and_run_sim()
df = pfri.export_to_pandas()
df.head(2)
```

As can be seen, the full variable names (incl. the path of the object) as given by PowerFactory are used in the header. To omit the path use: 

```{python}
df.columns = [column_name.split('\\')[-1] for column_name in df.columns]
df.head(2)
```

By default, `export_to_pandas` exports all monitored variables of the first `ElmRes` object found in the active study case. Alternatively, network elements and the respective variables as well as results objects (`ElmRes`) can be specified as lists:

```{python}
voltage_source = pfri.get_unique_obj(r'Network Model\Network Data\test_plot_interface\Grid 1\AC Voltage Source')
control_model = pfri.get_unique_obj(r'Network Model\Network Data\test_plot_interface\Grid 1\WECC WT Control System Type 4A\REEC_A Electrical Control Model')

elements =   [voltage_source, voltage_source, control_model]
variables = ['m:Qsum:bus1',  'm:Psum:bus1',  's:Ipcmd'    ]
elmres_list = [pfri.app.GetFromStudyCase('ElmRes'),]*len(variables)

df = pfri.export_to_pandas(list_of_results_objs=elmres_list, 
                           elements=elements, 
                           variables=variables)
df.columns = ['time', 'Q', 'P', 'Ip']
df.head(2)
```

```{python}
import matplotlib.pyplot as plt
fig, ax = plt.subplots(ncols=2, sharex=True, sharey=True)
ax[0].plot(df.time, df.Q)
ax[0].plot(df.time, df.P)
ax[1].plot(df.time, df.Ip)
```

## To CSV file
We can also export simulation results from PowerFactory to a csv file. The syntax is very simlar to the export to pandas:

```{python}
pfri.export_to_csv()
```

This exports all variables from the first result object (`ElmRes`) found in the active study case to the directory from where the script is run. You can also specifiy a directory, a file name (default is "results") and lists for grid objects, variables and results objects (similar to the method `export_to_pandas`). 


```{python}
voltage_source = pfri.get_unique_obj(r'Network Model\Network Data\test_plot_interface\Grid 1\AC Voltage Source')
control_model = pfri.get_unique_obj(r'Network Model\Network Data\test_plot_interface\Grid 1\WECC WT Control System Type 4A\REEC_A Electrical Control Model')

elements =   [voltage_source, voltage_source, control_model]
variables = ['m:Qsum:bus1',  'm:Psum:bus1',  's:Ipcmd'    ]
elmres_list = [pfri.app.GetFromStudyCase('ElmRes'),]*len(variables)

pfri.export_to_csv(list_of_results_objs=elmres_list, 
                   elements=elements, 
                   variables=variables)
```

The formatting of the exported csv file is as follows: the first line (header) specifies the path of the variables (object path + variable name), e.g. "Network Model\Network Data\test_plot_interface\Grid 1\WECC WT Control System Type 4A\REEC_A Electrical Control Model\s:Iqcmd" in all columns except for the first one, which is "Time". The remaining rows contain the values of the variables.

The static method `plot_from_csv` is used to plot from files of this format:

```{python}
plot = powfacpy.PFPlotInterface.plot_from_csv("results.csv", r"Network Model\Network Data"
    r"\test_plot_interface\Grid 1\AC Voltage Source\m:Qsum:bus1")  
plot = powfacpy.PFPlotInterface.plot_from_csv("results.csv", r"Network Model\Network Data"
    r"\test_plot_interface\Grid 1\AC Voltage Source\m:Psum:bus1") 
plot = powfacpy.PFPlotInterface.plot_from_csv("results.csv", r"Network Model\Network Data"
    r"\test_plot_interface\Grid 1\WECC WT Control System Type 4A\REEC_A Electrical Control Model\s:Ipcmd")  
```

*Pyplot* is used by default, but you can specify a different plot interface using the optional argument `plot_interface`.

